.. _l-feuille-de-route-2025-3A:

2025-05-31: Feuille de route 2024-2025 (3A)
===========================================

* Main Web Site : `https://sdpython.github.io/ <https://sdpython.github.io/>`_
* Material : `https://sdpython.github.io/doc/teachcompute/dev/ <https://sdpython.github.io/doc/teachcompute/dev/>`_

Plan
++++

Les cours et séances se déroulent sur 4 séances de 3h au second semestre.

Evaluation
++++++++++

Utilisation de vos compétences statistiques pour fabriquer un benchmark
adaptatif où l'on trouve la meilleure option de parallélisation
pour un algorithme parallélisé avec moins d'essais qu'une grille.

Séance 1 - 9/04: pararalléliser comment?
++++++++++++++++++++++++++++++++++++++++

**Part 1**

* stratégies de parallélisation (big data, deep learning, calcul matriciel...)
* coût, calcul, communication, caches
* CPU vs GPU
* conflits, synchronisation, mutex

* L1: 32 Ko, 3/4 Go/s, 1/2 cycles d'horloge, L2: 1Mo, 20 Go/s, 3/5 cycles d'horloge, L3: 8Mo, 40 Go/s, 10/20 cycles d'horloge
* thread / process
* :epkg:`AVX`
* branching
* cas du produit vectoriel
* produit matriciel

**Part 2**

1. Environnement

* C++ syntax
* Python
* présentation d'un package, C++
* Outils de développement : :epkg:`cmake`, :epkg:`git`, :epkg:`pull request`
* Python : :epkg:`setup.py`, :epkg:`sphinx`, :epkg:`pybind11`, :epkg:`cython`
* style : :epkg:`black`, :epkg:`ruff`
* :epkg:`github` et intégration continue
* Copy/Pasting is your friend.
* LLMs
* `VSCode <https://code.visualstudio.com/>`_

Séance 2 - 16/04: python, pybind11, cython
++++++++++++++++++++++++++++++++++++++++++

* introduction à :epkg:`cython`, :epkg:`numba`, :epkg:`pybind11`
* voir `_tutoriels <https://github.com/sdpython/teachcompute/tree/main/_tutoriels>`_
  et `tutorials.yml <https://github.com/sdpython/teachcompute/blob/main/.github/workflows/tutorials.yml>`_


Séance 3 - 23/04: alorithmes parallélisés
+++++++++++++++++++++++++++++++++++++++++

**Partie 1**

Ecriture d'un benchmark.

Lecture de benchmark.

* :ref:`l-parallelization-vector-sum`
* :ref:`l-parallelization-dot-product`
* :ref:`l-compare-filtering-implementation`
* :ref:`l-parallelization-processes`
* écrire un programme pour plusieurs processeurs
* CI, intégration continue
* :epkg:`cmake`
* :epkg:`blas`, :epkg:`lapack`, :epkg:`Eigen`, :epkg:`xtensor`, :epkg:`simd`
* `OpenMP <https://www.openmp.org/wp-content/uploads/OpenMP3.1-CCard.pdf>`_

**Partie 2**

* `Algorithme de Strassen <https://fr.wikipedia.org/wiki/Algorithme_de_Strassen>`_
* `HOGWILD !: A Lock-Free Approach to Parallelizing Stochastic Gradient Descent
  <https://papers.nips.cc/paper_files/paper/2011/file/218a0aefd1d1a4be65601cc6ddc1520e-Paper.pdf>`_
* problème de convergence
* quantization
* réseau de neurones
* parallélisation mémoire contrainte ou presque
* `A quantum-inspired classical algorithm for recommendation systems
  <https://arxiv.org/abs/1807.04271>`_
* utilisation de plusieurs processeurs, CPUs, GPUs..., NPU, `intel-npu <https://github.com/intel/intel-npu-acceleration-library>`_
* qui fait quoi ? data scientist, développeur

Séance 4 - 30/04: fusion d'opérations et projets
++++++++++++++++++++++++++++++++++++++++++++++++

* réalisation d'un benchmark
* fusion d'opérations : cas de l'`attention <https://en.wikipedia.org/wiki/Attention_(machine_learning)>`_:

.. math::
    
    Attention(Q,K,V)=softmax\left(\frac{QK'}{\sqrt{d_k}}\right)V

avec 

:math:`Q \in \mathbb{R}^{m \times d_q}`, :math:`K \in \mathbb{R}^{m \times d_k}`, :math:`V \in \mathbb{R}^{m \times d_V}`
et :

.. math::
  
    softmax(z_1,...z_n)_i = \frac{e_i}{\sum{i=1}{n} e_i}

Utilisation de vos compétences statistiques pour fabriquer un benchmark
adaptatif où l'on trouve la meilleure option de parallélisation
pour un algorithme parallélisé avec moins d'essais qu'une grille.

Sujets connexes
+++++++++++++++

* hacking (attaque), Spectre, Meltdown
* https://fr.wikipedia.org/wiki/DO-178, PowerPC, RISC
* `MAIA <https://azure.microsoft.com/en-us/blog/azure-maia-for-the-era-of-ai-from-silicon-to-software-to-systems/>`_
* `TPU <https://cloud.google.com/tpu>`_
* Un tri ?
* Le calcul de la médiane ? (:epkg:`BJKST`) Propriétés statistiques ?
* Pourquoi est-ce si difficile de paralléliser un tri ?
* `scatter_nd <https://www.tensorflow.org/api_docs/python/tf/scatter_nd>`_,
  Que faire quand les indices sont dupliqués ?
* Paralléliser une forêt aléatoire sur CPU, sur GPU ?
* La recherche de doublons dans une liste de
  coordonnées géographiques (longitude, latitude) ?
* `An Efficient Matrix Transpose in CUDA C/C++
  <https://developer.nvidia.com/blog/efficient-matrix-transpose-cuda-cc/>`_,
  notion de Bank Conflicts (voir 
  `CUDA C++ Programming Guide <https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html>`_)
  `CUDA, Cartes graphiques, Warp... <https://leria-info.univ-angers.fr/~jeanmichel.richer/cuda_crs4.php>`_



Installation de ce module
+++++++++++++++++++++++++

Il ensuite exécuter les instuctions suivantes en ligne de commande.

:: 

    git clone https://github.com/sdpython/teachcompute.git
    cd teachcompute
    pip install -e . -v --no-build-isolation

Si ça ne marche, installer `cmake <https://cmake.org/>`_.
Puis :

::

    export PYTHONPATH=<this folder>
    python _doc/examples/plot_bench_cpu_vector_sum.py

Lectures
++++++++

Collège de France

* `Une vision mathématique du "Deep Learning"
  <https://www.college-de-france.fr/site/pierre-louis-lions/seminar-2018-11-09-11h15.htm>`_
* `Stéphane Mallat, Représentation Parcimonieuse
  <https://www.college-de-france.fr/site/stephane-mallat/course-2021-01-13-09h30.htm>`_
* `Algorithmes quantiques : quand la physique quantique défie la thèse de Church-Turing
  <https://www.college-de-france.fr/site/frederic-magniez/inaugural-lecture-2021-04-01-18h00.htm>`_
* `Génération de données en IA par transport et débruitage (1)
  <https://www.college-de-france.fr/fr/agenda/cours/generation-de-donnees-en-ia-par-transport-et-debruitage>`_
  **pour comprendre ce que sont les LLMs**
* `Enseigner les maths par des challenges d'IA
  <https://www.college-de-france.fr/fr/agenda/grand-evenement/reenchanter-les-maths-ecole/enseigner-les-maths-par-des-challenges-ia>`_
* `Introduction aux réseaux de neurones profonds
  <https://www.college-de-france.fr/fr/agenda/cours/apprentissage-par-reseaux-de-neurones-profonds/introduction-aux-reseaux-de-neurones-profonds>`_

Points particuliers
+++++++++++++++++++

* `race condition <https://en.wikipedia.org/wiki/Race_condition>`
* `AVX <https://fr.wikipedia.org/wiki/Advanced_Vector_Extensions>`_
* `Cache <https://en.wikipedia.org/wiki/CPU_cache>`_

Livres
++++++

* `Introduction to Algorithms <https://edutechlearners.com/download/Introduction_to_algorithms-3rd%20Edition.pdf>`_
* `Latency Numbers Every Programmer Should Know
  <https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html>`_
* `What Every Computer Scientist Should Know About Floating-Point Arithmetic
  <https://faculty.tarleton.edu/agapie/documents/cs_343_arch/papers/1991_Goldberg_FloatingPoint.pdf>`_
* `What Every Programmer Should Know About Memory
  <https://www.akkadia.org/drepper/cpumemory.pdf>`_
* `Introduction to High Performance Scientific Computing
  <https://www.amazon.fr/Introduction-High-Performance-Scientific-Computing/dp/1257992546/ref=sr_1_1?ie=UTF8&qid=1476379218&sr=8-1&keywords=introduction+to+high+performance+scientific+computing+Victor+eijkhout>`_

Autres
++++++

* `AlphaFold <https://fr.wikipedia.org/wiki/AlphaFold>`_ (Prix Nodel)
  `Prix Nobel de chimie 2024 : quand l'IA permet de comprendre la structure des protéines
  <https://www.liberation.fr/sciences/prix-nobel-de-chimie-2024-david-baker-john-jumper-et-demis-hassabis-recompenses-pour-leurs-travaux-sur-les-proteines-20241009_SNIK66VRORBDJOSOJD4AGWHHJE/>`_
* `A quantum-inspired classical algorithm for recommendation systems <https://arxiv.org/abs/1807.04271>`_
* `CoqPilot, a plugin for LLM-based generation of proofs <https://arxiv.org/abs/2410.19605>`_
* `The Fusion of Large Language Models and Formal Methods for Trustworthy AI Agents: A Roadmap <https://arxiv.org/html/2412.06512v1>`_
* `GraphCast: AI model for faster and more accurate global weather forecasting
  <https://deepmind.google/discover/blog/graphcast-ai-model-for-faster-and-more-accurate-global-weather-forecasting/>`_

